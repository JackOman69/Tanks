# Здесь мы импортируем внутренние библиотеки Python
import random # Библиотека для вычисления случайности из заданных диапазонов чисел
import sys # Библиотека для прерывания выполнения программы на определенном этапе

# Две глобальные переменные для диапазона урона танков от минимального до максимального
min_damage = 1
max_damage = 20

# Применяя ООП мы создаем класс Tank, в котором будет весь основной код текстовой игры
class Tank:
    # Метод-конструктор, в котором мы прописываем атрибуты наших будущих танков
    # Данный метод используется для "сборки" экземпляра класса
    # Любой танк, которого мы создадим будет по умолчанию иметь эти самые атрибуты
    def __init__(self, model, armor, health):
        self.model = model # Модель танка в виде string
        self.armor = armor # Броня танка в виде int
        self.damage = random.randint(min_damage, max_damage) # Урон танка будет считываться рандомно в диапазоне от min_damage до max_damage
        self.health = health # Здоровье танка в виде int
        self.odd_int = 0 # Переменная счетчик, которую мы используем чтобы переключаться между нашим танком и танком противника

    # Метод вывода информации о танке
    def print_info(self):
        # Здесь мы используем f строку, чтобы динамично, в зависимости от переменной, выводить нужные нам значения
        info_tank = f"{self.model} имеет лобовую броню {self.armor} мм. при {self.health} ед. здоровья и урон в {self.damage} единиц"
        print(info_tank)

    # Метод shoot, в котором мы реализуем стрельбу из танков
    def shoot(self, enemy):
        while enemy.health >= 0 or self.health >= 0: # Условие - метод работает, пока значение какого либо из танков не будет равно 0
            self.odd_int += 1 # Срабатывает счетчик каждый раз срабатывании цикла, прибавляется +1 к счетчику
            if self.odd_int % 2 != 0: # Условия - если значение счетчика нечетное число, то стреляет наш танк
                enemy.health = enemy.health - self.damage / enemy.armor # Идет подсчет здоровья при выстреле по формуле Здоровье = Зд. - Урон танка / Броня танка
                if enemy.health <= 0: # Условие - если здоровье противника меньше либо равно 0
                    print(f"{self.model} Стреляет!\nЭкипаж танка {enemy.model} уничтожен") # Если здоровье противника равно 0, либо отрицательное число, то он уничтожен и выводится соответствующее сообщение
                    sys.exit() # Завершение программы
                print(f"{self.model} Стреляет!\n{self.model}: Точно в цель, у противника {enemy.model} осталось {round(enemy.health)} единиц здоровья")
            elif self.odd_int % 2 == 0:  # Условия - если значение счетчика четное число, то стреляет танк противника
                self.health = self.health - enemy.damage / self.armor # Идет подсчет здоровья при выстреле по формуле Здоровье = Здоровье - Урон танка / Броня танка
                if self.health <= 0: # Условие - если здоровье нашего танка меньше либо равно 0
                    print(f"{enemy.model} Стреляет!\nЭкипаж танка {self.model} уничтожен")  # Если здоровье нашего танка равно 0, либо отрицательное число, то мы проиграли и выводится соответствующее сообщение
                    sys.exit() # Завершение программы
                print(f"{enemy.model} Стреляет!\n{self.model}: Командир, по экипажу {self.model} попали, у нас осталось {round(self.health)} очков здоровья") # Вывод f строки о попадании снаряда противника в наш танк


own_tank = Tank("Пантера", 10, 30) # Создание экземпляра класса own_tank и передача ему нужных характеристик
# Мы пишем название нашего класса и в скобках указываем обязательные атрибуты, которые мы прописали в конструкторе
enemy = Tank("Тигр", 10, 30) # Создание экземпляра класса enemy (вражеского танка) и передача ему нужных характеристик

own_tank.print_info() # Через созданный экземпляр мы обращаемся к методу класса print_info о выводе информации о нашем танке
enemy.print_info() # Через созданный экземпляр мы обращаемся к методу класса print_info о выводе информации о вражеском танке

own_tank.shoot(enemy) # Через созданный экземпляр мы обращаемся к методу класса shoot, где начинается стрельба между нашим танком и вражеским
enemy.shoot(enemy) # Поскольку мы указали в качестве аргумента в классе enemy, то мы при вызове метода пишем обязательно enemy, чтобы была стрельба не только нашего танка, но и вражеского